---
- name: restrict home access
  file:
    path: "{{ ansible_user_dir }}"
    mode: 'o-rwx'

- name: generate ssh key
  user:
    name: "{{ ansible_user_id }}"
    generate_ssh_key: yes
    ssh_key_bits: 4096
    ssh_key_comment: "{{ ansible_user_id }}-default@{{ ansible_hostname }}"

- name: add Firefox snap into autostart
  file:
    src: /snap/firefox/current/firefox.desktop
    dest: ~/.config/autostart/firefox.desktop
    state: link

- name: make sure ~/.local/bin/ exists
  file:
    path: ~/.local/bin
    state: directory

- name: make sure wallpaper dir exists
  file:
    path: ~/.local/share/backgrounds
    state: directory

- name: download plain wallpaper
  get_url:
    url: "https://drive.google.com/uc?export=download&id=19d0NJ6zBRSFSxkfyD1tploOEOh-SvRTx"
    dest: ~/.local/share/backgrounds/blank.png
  register: wallpaper

- name: set the list of extensions
  set_fact:
    extensions:
      - id: unite@hardpixel.eu
        file: unitehardpixel.eu.v64.shell-extension.zip
      - id: sound-output-device-chooser@kgshank.net
        file: sound-output-device-chooserkgshank.net.v42.shell-extension.zip
      - id: system-monitor-next@paradoxxx.zero.gmail.com
        file: system-monitor-nextparadoxxx.zero.gmail.com.v41.shell-extension.zip

- name: download extension
  get_url:
    url: https://extensions.gnome.org/extension-data/{{ item.file }}
    dest: ~/Downloads/{{ item.file }}
  register: extension
  with_items: "{{ extensions }}"

- name: make sure extension dir exists
  file:
    path: ~/.local/share/gnome-shell/extensions/{{ item.id}}
    state: directory
  with_items: "{{ extensions }}"
  when: extension is changed

- name: extract extension
  unarchive:
    src: ~/Downloads/{{ item.file }}
    dest: ~/.local/share/gnome-shell/extensions/{{ item.id }}
    remote_src: yes
  with_items: "{{ extensions }}"
  when: extension is changed

- name: create ssh controlmasters directory
  file:
    path: ~/.ssh/masters
    state: directory
    mode: 0700

- name: make XDG directories
  file:
    path: "{{ item }}"
    state: directory
  with_items:
    - ~/Documents/Music
    - ~/Documents/Pictures
    - ~/Documents/Videos
  register: xdg_dir

- name: clean up old XDG directories
  command: rmdir "{{ item }}"
  with_items:
    - ~/Music
    - ~/Pictures
    - ~/Videos
  when: xdg_dir is changed

- name: clean up example link
  file:
    path: ~/examples.desktop
    state: absent
  when: xdg_dir is changed

- name: clear gtk bookmarks
  file:
    path: ~/.config/gtk-3.0/bookmarks
    state: absent
  when: xdg_dir is changed

- name: copy dotfiles
  copy:
    src: files/dotfiles/
    dest: ~/
  register: dotfiles

- name: make .lessfilter and ~/.local/bin/ executable
  file:
    path: "{{ item }}"
    mode: 0755
  with_items:
  - ~/.lessfilter
  - ~/.local/bin/bquote
  - ~/.local/bin/juju-current-model
  - ~/.local/bin/otp-ubuntu
  - ~/.local/bin/toggle-audio-loopback
  - ~/.local/bin/xclips-browser

- name: generate ICC profile
  command: |
    cd-create-profile \
      --output ~/.local/share/icc/{{ item }}.icc \
      ~/.local/share/icc/{{ item }}.xml
  when: dotfiles is changed
  with_items:
    - D63
    - D64

- name: bashrc
  blockinfile:
    dest: ~/.bashrc
    block: "{{ lookup('file', 'files/bashrc_block') }}"

- name: git config pull.ff only
  ini_file:
    dest: ~/.gitconfig
    section: pull
    option: ff
    value: only
    state: present

- name: git core.pager
  ini_file:
    dest: ~/.gitconfig
    section: core
    option: pager
    value: "diff-highlight | less -FRX"
    state: present

- name: git core.autocrlf
  ini_file:
    dest: ~/.gitconfig
    section: core
    option: autocrlf
    value: input
    state: present

- name: git log.follow
  ini_file:
    dest: ~/.gitconfig
    section: log
    option: follow
    value: 'true'
    state: present

- name: git merge.conflictStyle
  ini_file:
    dest: ~/.gitconfig
    section: merge
    option: conflictStyle
    value: diff3
    state: present

- name: git checkout.defaultRemote
  ini_file:
    dest: ~/.gitconfig
    section: checkout
    option: defaultRemote
    value: origin
    state: present

- name: render dconf
  template:
    src: templates/dconf.ini.j2
    dest: ~/.config/dconf/user.ini
  register: dconf

- name: reset dconf
  command: dconf reset -f /
  when: dconf is changed

- name: pause to prevent dconf race conditions
  pause:
    seconds: 5
  when: dconf is changed

- name: import dconf
  shell: dconf load / < ~/.config/dconf/user.ini
  when: dconf is changed

- name: 'workaround for LP: #1422290 - UNZIP'
  lineinfile:
    dest: ~/.profile
    regexp: "^{{ item }}="
    line: "{{ item }}='-O CP932 -I CP932'"
    state: present
  with_items:
    - UNZIP
    - ZIPINFO

- name: check if Dropbox is running
  command: dropbox running
  register: dropbox
  changed_when: False
  ignore_errors: True

- name: Dropbox start
  command: dropbox start -i
  environment:
    DISPLAY: ''
  when: dropbox is success

- name: check vscode plugins
  find:
    paths: ~/.vscode/extensions/
    recurse: no
    file_type: directory
    patterns: 'ms-python.python-*'
  register: vscode_plugin

- name: vscode plugins
  command: code --install-extension {{ item }}
  with_items:
    - ms-python.python
    - redhat.vscode-yaml
    - samuelcolvin.jinjahtml
    - golang.Go
    - ms-vscode.cpptools
    - tuttieee.emacs-mcx
    - streetsidesoftware.code-spell-checker
    - eamodio.gitlens
    - stkb.rewrap
    - njpwerner.autodocstring
  changed_when: False
  when: vscode_plugin.matched == 0

- name: download docsets for Zeal
  get_url:
    url: "https://tokyo.kapeli.com/feeds/{{ item }}.tgz"
    dest: ~/Downloads/{{ item }}.tgz
  register: docsets
  with_items:
    - Ansible
    - Jinja
    - Python_3

- name: create docsets dir
  file:
    path: ~/.local/share/Zeal/Zeal/docsets/
    state: directory

- name: extract docsets
  unarchive:
    src: ~/Downloads/{{ item }}.tgz
    dest: ~/.local/share/Zeal/Zeal/docsets/
    remote_src: yes
  with_items:
    - Ansible
    - Jinja
    - Python_3
  when: docsets is changed

- name: create src directory
  file:
    path: ~/src
    state: directory

- name: create a directory for private repos
  file:
    path: ~/src/corporate_private
    state: directory

- name: create a directory for openstack repos
  file:
    path: ~/src/openstack
    state: directory

- name: make sure git destination exists
  file:
    path: ~/src/{{ item.type }}
    state: directory
  with_items: "{{ git_repos }}"

- name: clone git repos
  git:
    repo: "{{ item.repo }}"
    dest: "~/src/{{ item.type }}/{{ item.name }}"
  with_items: "{{ git_repos }}"
