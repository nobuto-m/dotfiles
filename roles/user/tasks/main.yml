---
- name: restrict home access
  file:
    path: "{{ ansible_user_dir }}"
    mode: 'o-rwx'

- name: generate ssh key
  user:
    name: "{{ ansible_user_id }}"
    generate_ssh_key: yes
    ssh_key_comment: "{{ ansible_user_id }}-default@{{ ansible_hostname }}"

- name: make sure ~/.local/bin/ exists
  file:
    path: ~/.local/bin
    state: directory

- name: download 16.04 wallpaper
  get_url:
    url: https://launchpad.net/ubuntu/+archive/primary/+files/ubuntu-wallpapers_16.04.1-0ubuntu1_all.deb
    dest: ~/Downloads/ubuntu-wallpapers_16.04.1-0ubuntu1_all.deb
  register: wallpaper

- name: extract 16.04 wallpaper
  command: dpkg-deb -x ~/Downloads/ubuntu-wallpapers_16.04.1-0ubuntu1_all.deb ~/Downloads/ubuntu-wallpapers/
  when: wallpaper is changed

- name: make sure wallpaper dir exists
  file:
    path: ~/.local/share/backgrounds
    state: directory
  when: wallpaper is changed

- name: copy 16.04 wallpaper
  copy:
    src: ~/Downloads/ubuntu-wallpapers/usr/share/backgrounds/warty-final-ubuntu.png
    dest: ~/.local/share/backgrounds/warty-final-ubuntu-16.04.png
    remote_src: yes
  when: wallpaper is changed

- name: download unite extension
  get_url:
    url: https://extensions.gnome.org/extension-data/unitehardpixel.eu.v31.shell-extension.zip
    dest: ~/Downloads/unitehardpixel.eu.v31.shell-extension.zip
  register: unite

- name: make sure unite extension dir exists
  file:
    path: ~/.local/share/gnome-shell/extensions/unite@hardpixel.eu
    state: directory
  when: unite is changed

- name: extract unite extension
  unarchive:
    src: ~/Downloads/unitehardpixel.eu.v31.shell-extension.zip
    dest: ~/.local/share/gnome-shell/extensions/unite@hardpixel.eu
    remote_src: yes
  when: unite is changed

- name: create ssh controlmasters directory
  file:
    path: ~/.ssh/masters
    state: directory
    mode: 0700

- name: make XDG directories
  file:
    path: "{{ item }}"
    state: directory
  with_items:
    - ~/Documents/Music
    - ~/Documents/Pictures
    - ~/Documents/Videos
  register: xdg_dir

- name: clean up old XDG directories
  command: rmdir "{{ item }}"
  with_items:
    - ~/Music
    - ~/Pictures
    - ~/Videos
  when: xdg_dir is changed

- name: clean up example link
  file:
    path: ~/examples.desktop
    state: absent
  when: xdg_dir is changed

- name: clear gtk bookmarks
  file:
    path: ~/.config/gtk-3.0/bookmarks
    state: absent
  when: xdg_dir is changed

- name: create dev directory
  file:
    path: ~/dev
    state: directory

- name: create sandpit directory
  file:
    path: ~/sandpit
    state: directory

- name: copy dotfiles
  copy:
    src: files/dotfiles/
    dest: ~/
  register: dotfiles

- name: make .lessfilter executable
  file:
    path: ~/.lessfilter
    mode: 0755

- name: make otp-ubuntu executable
  file:
    path: ~/.local/bin/otp-ubuntu
    mode: 0755

- name: generate ICC profile
  command: |
    cd-create-profile \
      --output ~/.local/share/icc/Gamma.icc \
      ~/.local/share/icc/Gamma.xml
  when: dotfiles is changed

- name: bashrc
  blockinfile:
    dest: ~/.bashrc
    block: |
      unset ${!LC_*}
      
      export LESS='-R -j4'
      export LESS_TERMCAP_md=$'\e[01;38;5;180m'
      export LESS_TERMCAP_me=$'\e[0m'
      export LESS_TERMCAP_ue=$'\e[0m'
      export LESS_TERMCAP_us=$'\e[04;38;5;139m'
      
      [ -r ~/.byobu/prompt ] && . ~/.byobu/prompt
      
      GIT_PS1_SHOWDIRTYSTATE=true
      GIT_PS1_SHOWSTASHSTATE=true
      GIT_PS1_SHOWUNTRACKEDFILES=true
      GIT_PS1_SHOWUPSTREAM='auto'
      GIT_PS1_SHOWCOLORHINTS=true
      GIT_PS1__BASE="${PS1%\$*}"
      GIT_PS1__BASE="${GIT_PS1__BASE%\\}"
      __show_exit_status() {
          local exit=$?
          [ -z "$BYOBU_TERM" -a -z "$BYOBU_TTY" ] || return
          [ "$exit" = 0 ] || printf '\\[\\e[7m\\]%d\\[\\e[0m\\] ' "$exit"
      }
      __show_venv() {
          [ -z "$VIRTUAL_ENV" ] || printf '(%s) ' "$(basename "$VIRTUAL_ENV")"
      }
      __show_openstack() {
          if [ -n "$OS_CLOUD" ]; then
              printf ' (OS_CLOUD:\\[\\e[96m\\]%s\\[\\e[0m\\])' "$OS_CLOUD"
          elif [ -n "$OS_USERNAME" ]; then
              printf ' (OS_USERNAME:\\[\\e[96m\\]%s\\[\\e[0m\\])' "$OS_USERNAME"
          fi
      }
      
      PROMPT_COMMAND='__git_ps1 "$(__show_exit_status)$(__show_venv)${GIT_PS1__BASE}" "$(__show_openstack)\$ "'

- name: git core.excludesfile
  ini_file:
    dest: ~/.gitconfig
    section: core
    option: excludesfile
    value: "~/.gitignore_global"
    state: present

- name: git core.pager
  ini_file:
    dest: ~/.gitconfig
    section: core
    option: pager
    value: "diff-highlight | less -FRX"
    state: present

- name: git core.autocrlf
  ini_file:
    dest: ~/.gitconfig
    section: core
    option: autocrlf
    value: input
    state: present

- name: git log.follow
  ini_file:
    dest: ~/.gitconfig
    section: log
    option: follow
    value: true
    state: present

- name: git merge.conflictStyle
  ini_file:
    dest: ~/.gitconfig
    section: merge
    option: conflictStyle
    value: diff3
    state: present

- name: render dconf
  template:
    src: templates/dconf.ini.j2
    dest: ~/.config/dconf/user.ini
  register: dconf

- name: reset dconf
  command: dconf reset -f /
  when: dconf is changed

- name: pause to prevent dconf race conditions
  pause:
    seconds: 5
  when: dconf is changed

- name: import dconf
  shell: dconf load / < ~/.config/dconf/user.ini
  when: dconf is changed

- name: 'workaround for LP: #1422290 - UNZIP'
  lineinfile:
    dest: ~/.profile
    regexp: "^export {{ item }}="
    line: "export {{ item }}='-O CP932 -I CP932'"
    state: present
  with_items:
    - UNZIP
    - ZIPINFO

- name: check if Dropbox is running
  command: dropbox running
  register: dropbox
  changed_when: False
  ignore_errors: True

- name: Dropbox start
  command: dropbox start -i
  environment:
    DISPLAY: ''
  when: dropbox is success

- name: check vscode plugins
  find:
    paths: ~/.vscode/extensions/
    recurse: no
    file_type: directory
    patterns: 'ms-vscode.go-*'
  register: vscode_plugin

- name: vscode plugins
  command: code --install-extension {{ item }}
  with_items:
    - ms-python.python
    - redhat.vscode-yaml
    - ms-vscode.go
  changed_when: False
  when: vscode_plugin.matched == 0

- name: download docsets for Zeal
  get_url:
    url: "https://tokyo.kapeli.com/feeds/{{ item }}.tgz"
    dest: ~/Downloads/{{ item }}.tgz
  register: docsets
  with_items:
    - Ansible
    - Jinja
    - Python_3

- name: create docsets dir
  file:
    path: ~/.local/share/Zeal/Zeal/docsets/
    state: directory

- name: extract docsets
  unarchive:
    src: ~/Downloads/{{ item }}.tgz
    dest: ~/.local/share/Zeal/Zeal/docsets/
    remote_src: yes
  with_items:
    - Ansible
    - Jinja
    - Python_3
  when: docsets is changed

#- name: clone git repos
#  git:
#    repo: "{{ item.repo }}"
#    dest: "~/dev/{{ item.name }}"
#  with_items: "{{ git_repos }}"

#- name: clone openstack repos
#  git:
#    repo: "https://opendev.org/openstack/{{ item }}"
#    dest: "~/dev/openstack/{{ item }}"
#  with_items: "{{ openstack_projects }}"
